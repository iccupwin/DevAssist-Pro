"""
Модуль для сравнения ТЗ и КП
"""

import json
from src.services import ai_service

def compare_tz_and_kp(tz_text, kp_text):
    """
    Сравнивает текст ТЗ и КП и возвращает результаты анализа
    
    Args:
        tz_text (str): Текст Технического Задания
        kp_text (str): Текст Коммерческого Предложения
        
    Returns:
        dict: Результаты сравнения в структурированном виде
    """
    # Заглушка для демонстрации - в реальности здесь будет код, использующий AI-сервисы
    # В полноценной реализации здесь будет вызов Claude 3.5 Sonnet через ai_service.analyze_with_claude()
    
    # Формируем prompt для Claude
    prompt = """
    Ты — эксперт по анализу технических документов. Твоя задача — сравнить Техническое Задание (ТЗ) и Коммерческое Предложение (КП) 
    и определить, насколько КП соответствует требованиям ТЗ.
    
    Проведи детальный анализ по следующим пунктам:
    1. Общий процент соответствия КП требованиям ТЗ (число от 0 до 100)
    2. Анализ по разделам документа (процент соответствия и комментарии)
    3. Перечень требований из ТЗ, которые не учтены в КП
    4. Дополнительные функции/предложения в КП, не требуемые в ТЗ
    
    Верни результаты в формате JSON:
    {
      "compliance_score": число,
      "sections": [
        {"name": "название раздела", "compliance": число, "details": "комментарий"},
        ...
      ],
      "missing_requirements": ["требование 1", "требование 2", ...],
      "additional_features": ["функция 1", "функция 2", ...]
    }
    """
    
    # В реальной системе будет вызов AI API
    # result_json = ai_service.analyze_with_claude(tz_text + "\n\n" + kp_text, prompt)
    # return json.loads(result_json)
    
    # Заглушка для демонстрации
    comparison_result = {
        "compliance_score": 75,  # Процент соответствия (0-100)
        "sections": [
            {"name": "Общие требования", "compliance": 90, "details": "Предложение соответствует большинству общих требований, но не указаны детали по совместимости с существующими системами."},
            {"name": "Функциональные требования", "compliance": 85, "details": "Предложение охватывает основные функциональные требования, но некоторые второстепенные функции не упомянуты."},
            {"name": "Нефункциональные требования", "compliance": 65, "details": "Недостаточно проработаны требования по производительности и масштабируемости."},
            {"name": "Технические требования", "compliance": 70, "details": "Технические спецификации в целом соответствуют, но есть расхождения в версиях используемых технологий."},
            {"name": "Сроки и этапы", "compliance": 60, "details": "Предложенные сроки превышают указанные в ТЗ на 2 недели."}
        ],
        "missing_requirements": [
            "Требование по масштабируемости до 10000 пользователей",
            "Интеграция с системой учета рабочего времени",
            "Детальный план обучения персонала"
        ],
        "additional_features": [
            "Предложена дополнительная аналитическая панель",
            "Расширенные возможности экспорта данных"
        ]
    }
    
    return comparison_result

def analyze_additional_info(additional_texts, tz_text, kp_text):
    """
    Анализирует дополнительную информацию и определяет её влияние на оценку КП
    
    Args:
        additional_texts (list): Список текстов дополнительной информации
        tz_text (str): Текст Технического Задания
        kp_text (str): Текст Коммерческого Предложения
        
    Returns:
        dict: Результаты анализа дополнительной информации
    """
    # Заглушка для демонстрации - в реальности здесь будет код, использующий AI-сервисы
    # В полноценной реализации здесь будет вызов Claude 3.5 Sonnet через ai_service.analyze_with_claude()
    
    # Формируем prompt для Claude
    prompt = """
    Ты — эксперт по анализу бизнес-документации. Ты получил Техническое Задание (ТЗ), Коммерческое Предложение (КП) 
    и дополнительную информацию (протоколы встреч, письма, отчеты и т.д.).
    
    Твоя задача — проанализировать дополнительную информацию и определить, как она влияет на оценку соответствия КП требованиям ТЗ.
    
    Обрати внимание на:
    1. Дополнительные требования, которые могли быть обсуждены на встречах, но не отражены в ТЗ
    2. Информацию о компетенциях исполнителя, которая может повлиять на оценку
    3. Риски, которые можно выявить из дополнительной информации
    
    Верни результаты в формате JSON:
    {
      "key_findings": ["вывод 1", "вывод 2", ...],
      "impact": "описание влияния на общую оценку КП"
    }
    """
    
    # В реальной системе будет вызов AI API
    # combined_text = tz_text + "\n\n" + kp_text + "\n\n" + "\n\n".join(additional_texts)
    # result_json = ai_service.analyze_with_claude(combined_text, prompt)
    # return json.loads(result_json)
    
    # Заглушка для демонстрации
    additional_info_analysis = {
        "key_findings": [
            "Из протоколов встреч выявлены дополнительные требования, не указанные в ТЗ",
            "Участник ранее успешно реализовал два похожих проекта",
            "Есть риски с соблюдением заявленных сроков на основе истории компании"
        ],
        "impact": "Положительное влияние на общую оценку предложения благодаря предыдущему опыту, но есть риски по срокам.",
        "rating_impact": 2.0  # Добавляем значимый положительный модификатор к рейтингу (2 из 10)
    }
    
    return additional_info_analysis

def generate_final_recommendation(analysis_results):
    """
    Генерирует итоговое заключение и рекомендации на основе результатов анализа
    
    Args:
        analysis_results (dict): Полные результаты анализа, включая сравнение ТЗ/КП, 
                               анализ доп. информации и пользовательские рейтинги
        
    Returns:
        dict: Итоговое заключение и рекомендации
    """
    # Заглушка для демонстрации - в реальности здесь будет код, использующий OpenAI GPT-4o
    # В полноценной реализации здесь будет вызов GPT-4o через ai_service.generate_with_gpt()
    
    # Формируем prompt для GPT-4o
    prompt = """
    Ты — консультант по тендерам с богатым опытом оценки коммерческих предложений. Твоя задача — сформировать 
    итоговое экспертное заключение на основе результатов анализа и сравнения Технического Задания и Коммерческого Предложения.
    
    Учти в своем заключении:
    1. Общий процент соответствия КП требованиям ТЗ
    2. Пользовательские рейтинги по ключевым критериям
    3. Результаты анализа дополнительной информации
    4. Выявленные сильные и слабые стороны предложения
    
    Твой ответ должен содержать:
    1. Детальное экспертное заключение (3-5 абзацев)
    2. Четкую итоговую рекомендацию ("Рекомендовать к дальнейшему рассмотрению", "Рекомендовать с оговорками", "Отклонить")
    """
    
    # В реальной системе будет вызов AI API
    # final_conclusion = ai_service.generate_with_gpt(prompt, analysis_results)
    
    # Заглушка для демонстрации
    final_conclusion = """
    Проведенный анализ коммерческого предложения показывает, что оно в целом соответствует требованиям технического задания (общее соответствие 75%). 
    
    Основные достоинства предложения включают высокое соответствие функциональным требованиям, детальную проработку архитектуры и наличие квалифицированной команды. 
    
    Ключевые недостатки связаны с недостаточной проработкой вопросов масштабируемости, превышением запрашиваемых сроков и отсутствием детального плана обучения персонала.
    
    Учитывая дополнительную информацию о предыдущем успешном опыте реализации подобных проектов, которая положительно влияет на общую оценку, а также высокие оценки по большинству критериев, данное коммерческое предложение может быть рекомендовано к дальнейшему рассмотрению после уточнения условий по срокам выполнения и масштабируемости системы.
    """
    
    # Определение итоговой рекомендации
    avg_rating = sum(analysis_results.get("ratings", {0: 0}).values()) / len(analysis_results.get("ratings", {0: 0}))
    compliance_score = analysis_results["comparison_result"]["compliance_score"]
    
    overall_score = (avg_rating * 10 + compliance_score) / 2
    
    if overall_score >= 75:
        recommendation = "✅ РЕКОМЕНДОВАТЬ К ДАЛЬНЕЙШЕМУ РАССМОТРЕНИЮ"
        details = "Коммерческое предложение соответствует большинству требований ТЗ и получило высокие оценки по ключевым критериям."
    elif overall_score >= 60:
        recommendation = "⚠️ РЕКОМЕНДОВАТЬ С ОГОВОРКАМИ"
        details = "Коммерческое предложение имеет существенные достоинства, но требуется уточнение деталей по ряду вопросов."
    else:
        recommendation = "❌ ОТКЛОНИТЬ"
        details = "Коммерческое предложение существенно не соответствует требованиям ТЗ и/или получило низкие оценки по ключевым критериям."
    
    return {
        "final_conclusion": final_conclusion,
        "recommendation": recommendation,
        "details": details
    } 